import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { urlDB } from '../app.component';
import { LoginInfo } from '../entity/login-info.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private authState = new BehaviorSubject<boolean>(false);
  public currentState = this.authState.asObservable();
  private isAuth : boolean = false;
  private message : string | null | undefined = "";
  email: string = "";

  constructor(private _http : HttpClient, private _router : Router) {}

  signup(username : string, userEmail : string, password : string, desc : string = "", name: string = "") {
    var info : LoginInfo = {
      username,
      userEmail,
      password,
      desc,
      name
    };
    this._http.post<string>(urlDB + "/signup", info, {observe : "response"})
      .subscribe( {
        next : res => {
          console.log(res.body);
          this._router.navigate(["/auth/login"]);
          this.message = res.body;
        },
        error : er => {
          if (er.error.statusMessage != null) {
            console.log(er.error.statusMessage);
            this.message =  er.error.statusMessage;
          } else {
            console.log("Error signup");
          }
        }
      }
    );
    return this.message;
  }

  login(userEmail : string, password : string) {
    var info : LoginInfo = {
      userEmail,
      password,
    };
    this._http.post<{AccessToken: string}>(urlDB + "/login", info, {observe : "response"})
      .subscribe( {
        next : res => {
          if (res.body?.AccessToken != undefined) {
            localStorage.setItem("token", res.body?.AccessToken);
          }
          this.email = userEmail;
          this.isAuth = true;
          this.notifyAuth();
          this._router.navigate(["/home"])
          this.message = res.body?.AccessToken;
        },
        error : er => {
          if (er.error.statusMessage != null) {
            this.message = er.error.statusMessage;
          } else {
            console.log("Error login");
          }
        }
      }
    );
    return this.message;
  }

  isLoggedIn() : boolean {
    return this.isAuth;
  }

  logout() {
    this.isAuth = false;
    this.notifyAuth();
    localStorage.clear();
    this._router.navigate(["/auth/login"]);
  }

  notifyAuth() {
    this.authState.next(this.isAuth);
  }
}
