import { HttpClient } from '@angular/common/http';
import { HtmlParser } from '@angular/compiler';
import { Component, ElementRef, ViewChild } from '@angular/core';
import { urlDB } from 'src/app/app.component';
import { FileD } from 'src/app/entity/file.model';
import { AuthService } from 'src/app/service/auth.service';
import { FileService } from 'src/app/service/file.service';

@Component({
  selector: 'app-file',
  templateUrl: './file.component.html',
  styleUrls: ['./file.component.scss']
})
export class FileComponent {
  files : FileD[] = [];
  isAuth : boolean = false;
  fileByteArray : any[] = [];
  fileName : string = "";
  isError : boolean = false;
  finished : boolean = false;
  messageRes :string = "Internal Error";
  @ViewChild('reffile') inputFile : ElementRef;

  constructor(private _auth: AuthService, private _file : FileService) {}

  ngOnInit(): void {
    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.
    //Add 'implements OnInit' to the class.
    this._auth.currentState.subscribe(data => this.isAuth = data);
  }

  getFile(input: string) {
    this._file.getFile(input).subscribe({
      next : data => {
        this.files = [data];
        this.isError = true;
      }, error : er => {
        this.isError = true;
        if (er.error.statusMessage != null) {
          this.messageRes = er.error.statusMessage;
        }
      }
    });
  }

  getFiles(input: string) {
    this._file.getFiles(input).subscribe({
      next : data => {
        this.files = data;
        if (this.files.length == 0) {
          this.messageRes = "[Error] No files form the user " + input;
          this.isError = true;
        }
      }, error : er => {
        this.isError = true;
        if (er.error.statusMessage != null) {
          this.messageRes = er.error.statusMessage;
        }
      }
    });
  }

  deleteFile(input: string) {
    this._file.deleteFile(input).subscribe({
      next : data => {
        this.isError = false;
        this.finished = true;
        setTimeout(() => {
          this.finished = false;
        },1000);
      },
      error: er => {
        this.isError = true;
        if (er.error.statusMessage != null) {
          this.messageRes = er.error.statusMessage;
        }
      }
    });
  }

  onFileSelected(event:any) {
    const file : File = event.target.files[0];
    console.log(file);
    this.fileName = file.name;


    var fileReader: FileReader = new FileReader();
    this.fileByteArray = [];
    var self = this;
    fileReader.onloadend = function(x) {
      var result = fileReader.result?.toString();
      var array = Array.from(result!);

      array?.forEach( c => self.fileByteArray.push(c.charCodeAt(0)));
    }
    fileReader.readAsBinaryString(file);

  }

  addFile() {
    this._file.addFile(this.fileByteArray, this.fileName).subscribe({
      next : data => {
        this.isError = false;
        this.finished = true;
        setTimeout(() => {
          this.finished = false;
        },1000);
      },
      error: er => {
        this.isError = true;
        if (er.error.statusMessage != null) {
          this.messageRes = er.error.statusMessage;
        }
      }});
  }



}
