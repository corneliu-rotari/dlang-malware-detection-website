import { Component } from '@angular/core';
import { Url } from 'src/app/entity/url.model';
import { AuthService } from 'src/app/service/auth.service';
import { UrlService } from 'src/app/service/url.service';

@Component({
  selector: 'app-url',
  templateUrl: './url.component.html',
  styleUrls: ['./url.component.scss']
})
export class UrlComponent {
  isAuth : boolean = false;
  urlsToPrint : Url[] | null = null
  isError: boolean = false;
  messageRes : string = "Internal error";
  finished :boolean = false;


  constructor(private _auth: AuthService,
              private _url : UrlService) {}

  ngOnInit(): void {
    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.
    //Add 'implements OnInit' to the class.
    this._auth.currentState.subscribe(data => this.isAuth = data);
  }

  add(url:string) {
    this._url.addUrl(url).subscribe({
      next : mess => {
        console.log(mess);
        this.isError = false;
        this.finished = true;
        setTimeout(() => {
          this.finished = false;
        },1000);
    },
    error : er => {
      this.isError = true;
      if (er.error.statusMessage != null) {
        this.messageRes = er.error.statusMessage;
      }
    }});
  }

  getUrl(url:string) {
    this._url.getUrl(url).subscribe({next : data => {
        this.isError = false;
        this.urlsToPrint = [data];
      },
    error : er => {
      this.isError = true;
      if (er.error.statusMessage != null) {
        this.messageRes = er.error.statusMessage;
      }
    }});
  }

  getUrls(userEmail : string) {
    this._url.getUrls(userEmail).subscribe({ next :  data => {
      this.urlsToPrint = data;
      if (this.urlsToPrint.length == 0) {
        this.messageRes = "[Error] No urls form the user " + userEmail;
        this.isError = true;
      }
    }, error : er => {
      this.isError = true;
      if (er.error.statusMessage != null) {
        this.messageRes = er.error.statusMessage;
      }
    }});
  }

  deleteUrl(url:string) {
    this._url.deleteUrl(url).subscribe({
      next : mess => {
        console.log(mess);
        this.isError = false;
        this.finished = true;
        setTimeout(() => {
          this.finished = false;
        },1000);
      },
      error: er => {
        this.isError = true;
        if (er.error.statusMessage != null) {
          this.messageRes = er.error.statusMessage;
        }
      }
    });
  }

}
